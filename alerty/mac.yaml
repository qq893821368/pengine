service: # List[str] 给整个告警做分类，同类的告警可以分到同一组
  - test
  - config

for: 1800.0 # float (second) 告警持续时长，在指定时间内不再重复同级告警，单位：秒
sleep: 10.0 # float (second) 规定告警检测的间隔时间，单位：秒
recover: 3 # int (round) 告警消失规定的次数后结束抑制
action: "placeholder" # 告警时的动作，暂时没想好怎么把产生的告警写入到不同的数据库供分析和告警

silent: # List[str] 静默时间段
  - "02:00-04:00"
  - "05:00-05:30"
  - "16:40-16:45"

database: # 数据库配置
  url: "http://localhost:8086" # influxdb的url
  token: "r4aKTp50b1qx9AB-mIM_zSq_su_3kfj71SWFW042l3P5fYQIEKKQQjjZaZ_2JnJFxukI1dbKW4Okz5Wu9VvxHQ=="
  org: "Bee" # 组织
  flux: | # str 插入的查询语句，决定了查询的数据
    from(bucket: "1year")
    |> range(start: 2022-11-28T09:24:00Z, stop:2022-11-28T09:25:00Z)
    |> filter(fn: (r) => r._measurement == "pingprobe")
    |> filter(fn: (r) => r.domain == "114.114.114.114")
    |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
    |> drop(columns: ["_measurement",  "_start", "_stop"])
    |> group(columns: ["ttl"])
    |> sort(columns: ["_time"])
resultset: # 查询结果配置
  groupby: # list[str] 如需对查询到的结果进行分组，则设置分组索引
    - ttl

rule:
  simple: # 规则名
    type: "expr" # str 规则类型，expr表达式，lambda, proc为可执行py代码，lambda单行，proc多行，默认类型为表达式
    value: "Avg($loss_rate) lte 5.0" # $variable取数据中的某个字段，用嵌套函数包围做映射，例如求均值、最值等，后接表达式及阈值，形成A expr B的形式表达一个条件
  complex:
    value: "round(Mean(Last(3,Round(Float($avg),2))),2) neq 1.0" # 大写字母开头的函数为重写的映射函数, 小写的为python自带函数或1to1函数
  many_values:
    value: "Head(5,$min) > 1.5"
  lambda_rule:
    type: "lambda"
    value: | # 此处取上一次产生告警的ttl值与本次数据的ttl值对比，若本次数据ttl更大才算匹配成功
      False not in Alerty.cur_episode['ttl'].map(lambda x: int(x) > Alerty.prev_alert("$[name]").get("ttl", 0))
  proc_rule:
    type: "proc"
    value: | # 将lambda规则改写成proc格式，proc支持多行代码
      ttl_result = Alerty.cur_episode['ttl'].map(lambda x: int(x) > Alerty.prev_alert("$[name]").get("ttl", 0))
      return False not in ttl_result
  interrupt_signal:
    value: "Tail(3,$loss_rate) gte 100.0"
  ttl_check:
    type: "lambda"
    value: 'False not in Alerty.cur_episode["ttl"].map(lambda x: int(x) > Alerty.prev_alert("$[name]").get("ttl", 0))'

alert:
  a:
    level: err # str 告警等级 emerg, alert, crit, err, warning, notice, info, debug
    priority: 0x4 # int 告警优先级，决定告警实际的等级，在该告警中优先级越小的越优先被告警，且抑制优先级更大的
    # ${var}取告警数据中content里的kv
    # $[var]取全局变量Alerty里的数据
    message: "一次测试的告警，发生在${domain}, before添加了: $[before], after添加了:${after}"
    before: | # str 在生成告警之前运行的py代码
      Alerty.option("before") = 123
    after: |  # str 在生成告警之后运行的py代码
      Alerty.current_alert("$[name]")["content"]["after"] = 321
    trigger: "simple & (complex | many_values) | code_rule" # 告警的触发条件，对规定好的规则进行运算表达
    # 结果序列模式，为了能以统一流程处理，查询出的数据总会被处理成groupby后的形式
    # T: 不分组，trigger结果为True
    # F：不分组，trigger结果为False
    # *T：分组，分组后的数据经trigger后最后一组为True
    # *F：分组，分组后的数据经trigger后最后一组为False
    # *T*：分组，分组后的数据经trigger后存在一组为True
    # *F*：分组，分组后的数据经trigger后存在一组为False
    # *T*F：分组，分组后的数据经trigger后，最后一组为False且其余组存在一组为True
    # *F*T：分组，分组后的数据经trigger后，最后一组为True且其余组存在一组为False
    # 默认为T，即不分组并匹配trigger后为True
    result: "*T*"
  b:
    level: err # str 告警等级 emerg, alert, crit, err, warning, notice, info, debug
    priority: 0x3 # int 告警优先级，决定告警实际的等级，在该告警中优先级越小的越优先被告警，且抑制优先级更大的
    # ${var}取告警数据中content里的kv
    # $[var]取全局变量Alerty里的数据
    message: "一次测试的告警，发生在${domain}, before添加了: $[before], after添加了:${after}"
    before: | # str 在生成告警之前运行的py代码
      Alerty.option("before") = 123
    after: |  # str 在生成告警之后运行的py代码
      Alerty.current_alert("$[name]")["content"]["after"] = 321
    trigger: "(complex | many_values) | code_rule" # 告警的触发条件，对规定好的规则进行运算表达
  interrupt_alert:
    level: err
    priority: 0x1
    message: ""
    trigger: "interrupt_signal"
    result: "*T"
